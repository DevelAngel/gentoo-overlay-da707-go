--- a/src/code.gitea.io/gitea/cmd/web.go	2018-10-05 21:20:29.881162220 +0200
+++ c/src/code.gitea.io/gitea/cmd/web.go	2018-10-06 20:31:24.199391210 +0200
@@ -19,6 +19,8 @@
 	"code.gitea.io/gitea/routers"
 	"code.gitea.io/gitea/routers/routes"
 
+    "github.com/coreos/go-systemd/activation" // Used for socket activation
+
 	"github.com/Unknwon/com"
 	context2 "github.com/gorilla/context"
 	"github.com/urfave/cli"
@@ -121,12 +123,6 @@
 		}
 	}
 
-	listenAddr := setting.HTTPAddr
-	if setting.Protocol != setting.UnixSocket {
-		listenAddr += ":" + setting.HTTPPort
-	}
-	log.Info("Listen: %v://%s%s", setting.Protocol, listenAddr, setting.AppSubURL)
-
 	if setting.LFS.StartServer {
 		log.Info("LFS server enabled")
 	}
@@ -139,40 +135,57 @@
 	}
 
 	var err error
-	switch setting.Protocol {
-	case setting.HTTP:
-		err = runHTTP(listenAddr, context2.ClearHandler(m))
-	case setting.HTTPS:
-		if setting.RedirectOtherPort {
-			go runHTTPRedirector()
-		}
-		err = runHTTPS(listenAddr, setting.CertFile, setting.KeyFile, context2.ClearHandler(m))
-	case setting.FCGI:
-		listener, err := net.Listen("tcp", listenAddr)
-		if err != nil {
-			log.Fatal(4, "Failed to bind %s", listenAddr, err)
-		}
-		defer listener.Close()
-		err = fcgi.Serve(listener, context2.ClearHandler(m))
-	case setting.UnixSocket:
-		if err := os.Remove(listenAddr); err != nil && !os.IsNotExist(err) {
-			log.Fatal(4, "Failed to remove unix socket directory %s: %v", listenAddr, err)
-		}
-		var listener *net.UnixListener
-		listener, err = net.ListenUnix("unix", &net.UnixAddr{Name: listenAddr, Net: "unix"})
-		if err != nil {
-			break // Handle error after switch
+	listeners, err := activation.Listeners()
+	if err == nil {
+		// use systemd socket activation
+		log.Info("Listen to systemd socket")
+		if len(listeners) != 1 {
+			log.Fatal(4, "Unexpected number of socket activation fds")
+		}
+		err = http.Serve(listeners[0], context2.ClearHandler(m))
+	} else {
+        // no systemd socket available, look into setting
+		listenAddr := setting.HTTPAddr
+		if setting.Protocol != setting.UnixSocket {
+			listenAddr += ":" + setting.HTTPPort
 		}
+		log.Info("Listen: %v://%s%s", setting.Protocol, listenAddr, setting.AppSubURL)
 
-		// FIXME: add proper implementation of signal capture on all protocols
-		// execute this on SIGTERM or SIGINT: listener.Close()
-		if err = os.Chmod(listenAddr, os.FileMode(setting.UnixSocketPermission)); err != nil {
-			log.Fatal(4, "Failed to set permission of unix socket: %v", err)
+		switch setting.Protocol {
+		case setting.HTTP:
+			err = runHTTP(listenAddr, context2.ClearHandler(m))
+		case setting.HTTPS:
+			if setting.RedirectOtherPort {
+				go runHTTPRedirector()
+			}
+			err = runHTTPS(listenAddr, setting.CertFile, setting.KeyFile, context2.ClearHandler(m))
+		case setting.FCGI:
+			listener, err := net.Listen("tcp", listenAddr)
+			if err != nil {
+				log.Fatal(4, "Failed to bind %s", listenAddr, err)
+			}
+			defer listener.Close()
+			err = fcgi.Serve(listener, context2.ClearHandler(m))
+		case setting.UnixSocket:
+			if err := os.Remove(listenAddr); err != nil && !os.IsNotExist(err) {
+				log.Fatal(4, "Failed to remove unix socket directory %s: %v", listenAddr, err)
+			}
+			var listener *net.UnixListener
+			listener, err = net.ListenUnix("unix", &net.UnixAddr{Name: listenAddr, Net: "unix"})
+			if err != nil {
+				break // Handle error after switch
+			}
+
+			// FIXME: add proper implementation of signal capture on all protocols
+			// execute this on SIGTERM or SIGINT: listener.Close()
+			if err = os.Chmod(listenAddr, os.FileMode(setting.UnixSocketPermission)); err != nil {
+				log.Fatal(4, "Failed to set permission of unix socket: %v", err)
+			}
+			err = http.Serve(listener, context2.ClearHandler(m))
+		default:
+			log.Fatal(4, "Invalid protocol: %s", setting.Protocol)
 		}
-		err = http.Serve(listener, context2.ClearHandler(m))
-	default:
-		log.Fatal(4, "Invalid protocol: %s", setting.Protocol)
-	}
+    }
 
 	if err != nil {
 		log.Fatal(4, "Failed to start server: %v", err)
